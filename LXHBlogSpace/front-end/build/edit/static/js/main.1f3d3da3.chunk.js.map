{"version":3,"sources":["serviceWorker.js","components/Navbar.js","components/BlogEdit.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","props","IndexZone","Tabs","value","state","currentTab","onChange","event","newTab","bind","indicatorColor","Tab","className","label","srcStatusZone","noticeOpenState","noticeMsg","AppBar","position","style","minWidth","background","Typography","variant","this","setState","fetch","then","response","json","error","userinfo","vaild","ReactDOM","render","Link","href","name","underline","Avatar","src","avatar","document","getElementsByClassName","React","Component","BlogEdit","rawBlogContent","previewContent","srcEditRegion","submitButtonStyle","Input","type","display","Button","InputLabel","placeholder","Container","fixed","id","disableUnderline","multiline","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f3d3da3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport ToolBar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n//import Button from '@material-ui/core/Button'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Link from '@material-ui/core/Link'\nimport Avatar from '@material-ui/core/Avatar';\n\n/*\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport DialogAction from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\n\nimport TextField from \"@material-ui/core/TextField\"\n\nimport Snackbar from '@material-ui/core/Snackbar'\n\n\nimport AccountBoxIcon from '@material-ui/icons/AccountBox'\nimport AssignmentIcon from '@material-ui/icons/Assignment'\n*/\nimport \"./css/Navbar.css\"\n\n//var API_PROVIDER_SERVER = \"http://api.leaflxh.com\";\n\n\n//以下为重构的代码\nclass NavBar extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            srcStatusZone: <></>,\n            currentTab: \"write_article\",\n            noticeOpenState: false,\n            noticeMsg: \"\"\n        }\n    }\n\n    render()\n    {\n        return(\n            <AppBar position=\"fixed\" style={{minWidth: 960, background: \"#f5f5f5\"}}>\n                <ToolBar >\n                    <Typography className =\"navstyle-title\" variant=\"h5\">\n                        LXH's Blog Space\n                    </Typography>\n                    <div className=\"navstyle-index\">\n                        {this.IndexZone()}\n                    </div>\n                    <div className=\"navstyle-status\">\n                        \n                    </div>\n                </ToolBar>\n            </AppBar>\n        )\n    }\n\n\n    IndexZone = () => {\n        function handleChange(event, newTab) {\n            if (newTab === \"main\")\n            {\n                window.location = \"/\";\n            }\n        };\n    \n        return(\n            <Tabs value = {this.state.currentTab} onChange={handleChange.bind(this)} indicatorColor=\"primary\" >\n                <Tab className=\"indexstyle-tabmod\" label=\"首页\"  value=\"main\"/>\n                <Tab className=\"indexstyle-tabmod\" label=\"创作\"  value=\"write_article\" />\n                \n            </Tabs>\n        );\n    }\n\n    setNoticeClose()\n    {\n        this.setState({\n            noticeOpenState: false\n        })\n    }\n\n\n    componentDidMount()\n    {\n        //初始化右边的状态栏，流程为：检查是否登录，如果是则显示用户信息，否则显示登录按钮\n        fetch(\"/api/v1/GetUserInfo\")\n            .then(response=>response.json(), (error) => {\n                window.location = \"/\";\n            })\n            .then((userinfo)=>{\n                if (userinfo.vaild)\n                {\n                    ReactDOM.render(\n                    <>\n                        <div className=\"navstyle-userZone\">\n                            <div className=\"navstyle-userId\">\n                                <Link href={\"/user/\" + userinfo.name} underline=\"none\" >{userinfo.name}</Link>\n                            </div>\n                            <Avatar src={userinfo.avatar}/>\n                        </div>\n                    </>\n                    , document.getElementsByClassName(\"navstyle-status\")[0]);\n                        \n                }\n                else\n                {\n                    //window.location = \"/\";\n                }\n            });\n    }\n};\n\nexport default NavBar;","import React from \"react\"\n\nimport Container from \"@material-ui/core/Container\"\nimport Button from \"@material-ui/core/Button\"\nimport Input from \"@material-ui/core/Input\"\nimport InputLabel from \"@material-ui/core/InputLabel\"\n\nimport \"./css/BlogEdit.css\"\nclass BlogEdit extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            rawBlogContent: \"\",\n            previewContent: false,\n            srcEditRegion: <></>,\n            submitButtonStyle: \"tool-bar-button tool-bar-button-submit-ok\"\n        };\n    }\n\n    render()\n    {\n        return (\n            <div className=\"edit-container\">\n                <div className=\"tool-bar\">\n                    <div className=\"tool-bar-buttons\">\n                        <Input className=\"tool-bar-button\" type=\"file\" style={{display: \"none\"}}>上传背景</Input>\n                        <Input className=\"tool-bar-button\" type=\"file\" style={{display: \"none\"}}>上传图片</Input>\n                        <Button className=\"tool-bar-button\">上传背景</Button>\n                        <Button className=\"tool-bar-button\">上传图片</Button>\n                        <Button className=\"tool-bar-button\">保存草稿</Button>\n                        <Button className=\"tool-bar-button tool-bar-button-preview\">预览博文</Button>\n                        <Button className={this.state.submitButtonStyle}>发表</Button>\n                    </div>\n                    <InputLabel className=\"tool-bar-savetime\">上次草稿保存的时间：暂未保存</InputLabel>\n                </div>\n                <div className=\"article-title\">\n                    <Input placeholder=\"在此输入文章标题\"  className=\"article-title-input\"></Input>\n                </div>\n                <Container fixed className=\"article-content-container\">\n                    <div className=\"flexable-container\">\n                        <Input id=\"article-content-input\" className=\"article-content-region\" disableUnderline placeholder=\"在此输入文章内容\" multiline></Input>\n                    </div>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default BlogEdit;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport Navbar from \"./components/Navbar\"\nimport BlogEdit from \"./components/BlogEdit\"\n\nReactDOM.render(<Navbar />, document.getElementById('navbar'));\nReactDOM.render(<BlogEdit />, document.getElementById('article-edit-region'));\nserviceWorker.unregister();\n"],"sourceRoot":""}