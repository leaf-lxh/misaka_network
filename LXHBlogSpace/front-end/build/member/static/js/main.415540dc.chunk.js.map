{"version":3,"sources":["serviceWorker.js","components/Navbar.js","components/MainApp.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","props","state","srcStatusZone","currentTab","loginDialogOpenState","noticeOpenState","noticeMsg","AppBar","position","style","minWidth","background","zIndex","Typography","className","variant","Button","onClick","this","ShowDialog","bind","href","Dialog","open","onClose","HideDialog","DialogTitle","DialogContent","TextField","id","label","type","name","autoComplete","margin","marginTop","DoLoginAction","Snackbar","setNoticeClose","message","autoHideDuration","setState","console","log","request","XMLHttpRequest","onreadystatechange","status","readyState","setTimeout","reload","response","JSON","parse","responseText","reason","API_PROVIDER_SERVER","send","fetch","then","json","error","LoginRegion","userinfo","vaild","ReactDOM","render","Link","underline","Avatar","src","avatar","document","getElementsByClassName","React","Component","MainApp","selectedUserInfo","selectedSystemMsg","selectedMyMsg","selectedMyFavorite","srcContainer","Container","fixed","page","userInfo","selectedState","icons","Drawer","List","map","buttonText","index","ListItem","button","key","func","switchContainer","ListItemIcon","ListItemText","paddingLeft","primary","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.415540dc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport ToolBar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport Link from '@material-ui/core/Link'\nimport Avatar from '@material-ui/core/Avatar';\n\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport DialogAction from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\n\nimport TextField from \"@material-ui/core/TextField\"\n\nimport Snackbar from '@material-ui/core/Snackbar'\n\n\nimport AccountBoxIcon from '@material-ui/icons/AccountBox'\nimport AssignmentIcon from '@material-ui/icons/Assignment'\n\nimport \"./css/Navbar.css\"\n\nvar API_PROVIDER_SERVER = \"http://api.leaflxh.com\";\n\n\n//以下为重构的代码\nclass NavBar extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            srcStatusZone: <></>,\n            currentTab: \"article\",\n            loginDialogOpenState: false,\n            noticeOpenState: false,\n            noticeMsg: \"\"\n        }\n    }\n\n    render()\n    {\n        return(\n            <AppBar position=\"fixed\" style={{minWidth: 960, background: \"#f5f5f5\", zIndex: 1201}}>\n                <ToolBar >\n                    <Typography className =\"navstyle-title\" variant=\"h5\">\n                        LXH's Blog Space\n                    </Typography>\n                    <div className=\"navstyle-status\">\n                        <>\n                            <Button className= \"navstyle-button\" onClick={this.ShowDialog.bind(this)}>\n                                登录\n                                <AccountBoxIcon className=\"navstyle-icon\" />\n                            </Button>\n                            <Button className=\"navstyle-button\" href=\"/join\">\n                                注册\n                                <AssignmentIcon className=\"navstyle-icon\" />\n                            </Button>\n                            <Dialog open={this.state.loginDialogOpenState} onClose={this.HideDialog.bind(this)}>\n                                <DialogTitle>登录</DialogTitle>\n                                <DialogContent >\n                                    <div>\n                                        <TextField\n                                            id=\"login-username\"\n                                            label=\"用户名或邮箱\"\n                                            type=\"email\"\n                                            name=\"email\"\n                                            autoComplete=\"email\"\n                                            margin=\"normal\"\n                                            style={{margin: \"0 auto 0 auto\", minWidth: \"300px\"}}\n                                        />\n                                    </div>\n                                    <div>\n                                        <TextField\n                                            id=\"login-password\"\n                                            label=\"密码\"\n                                            type=\"password\"\n                                            name=\"password\"\n                                            autoComplete=\"password\"\n                                            margin=\"normal\"\n                                            style={{marginTop: \"15px\", minWidth: \"300px\"}}\n                                        />\n                                    </div>\n                                </DialogContent>\n                                <DialogAction>\n                                    <Button onClick={props=>this.DoLoginAction(props)}>登录</Button>\n                                    <Button onClick={this.HideDialog.bind(this)}>关闭</Button>\n                                </DialogAction>\n                                <Snackbar  open={this.state.noticeOpenState} onClose={this.setNoticeClose.bind(this)} message={this.state.noticeMsg} autoHideDuration={3000} />\n                            </Dialog>\n                        </>\n                    </div>\n                </ToolBar>\n            </AppBar>\n        )\n    }\n\n    ShowDialog()\n    {\n        this.setState({\n            loginDialogOpenState: true\n        })\n        console.log(this.state);\n    }\n    \n    HideDialog()\n    {\n        this.setState({\n            loginDialogOpenState: false\n        })\n        \n    }\n\n\n    DoLoginAction(props)\n    {\n        console.log(props);\n        var request = new XMLHttpRequest();\n        request.onreadystatechange = function() {\n            if (request.status === 302 && request.readyState === 4)\n            {\n                this.setState({\n                    noticeOpenState: true,\n                    noticeMsg: \"登录成功\"\n                })\n\n                setTimeout(window.location.reload, 1000);\n            }\n            else if (request.status === 200 && request.readyState === 4)\n            {\n                var response = JSON.parse(request.responseText);\n                this.setState({\n                    noticeOpenState: true,\n                    noticeMsg: \"登录失败：\" + response.reason\n                })\n            }\n        }\n        request.open(\"POST\", API_PROVIDER_SERVER + \"/api/v1/passport/login\", true)\n        request.send(null);\n    }\n\n    setNoticeClose()\n    {\n        this.setState({\n            noticeOpenState: false\n        })\n    }\n\n\n    componentDidMount()\n    {\n        //初始化右边的状态栏，流程为：检查是否登录，如果是则显示用户信息，否则显示登录按钮\n        fetch(\"/api/v1/GetUserInfo\")\n            .then(response=>response.json(), (error) => {\n                this.setState({\n                    srcStatusZone: this.LoginRegion()\n                });\n            })\n            .then((userinfo)=>{\n                if (userinfo.vaild)\n                {\n                    ReactDOM.render(\n                    <>\n                        <div className=\"navstyle-userZone\">\n                            <div className=\"navstyle-userId\">\n                                <Link href={\"/user/\" + userinfo.name} underline=\"none\" >{userinfo.name}</Link>\n                            </div>\n                            <Avatar src={userinfo.avatar}/>\n                        </div>\n                    </>\n                    , document.getElementsByClassName(\"navstyle-status\")[0]);\n                        \n                }\n            });\n    }\n};\n\nexport default NavBar;","import React from \"react\"\nimport Drawer from \"@material-ui/core/Drawer\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\nimport AccountBox from \"@material-ui/icons/AccountBox\"\nimport Class from \"@material-ui/icons/Class\"\nimport Message from \"@material-ui/icons/Message\"\nimport Feedback from \"@material-ui/icons/Feedback\"\n\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport Container from \"@material-ui/core/Container\"\n\nimport \"./css/MainApp.css\"\nclass MainApp extends React.Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state = {\n            selectedUserInfo: \"panel-selected-button\",\n            selectedSystemMsg: \"\",\n            selectedMyMsg: \"\",\n            selectedMyFavorite: \"\",\n            srcContainer: <></>\n        };\n    }\n\n    userInfo()\n    {\n        return (\n            <Container fixed className=\"main-app-container\">\n                个人资料\n            </Container>\n        )\n    }\n\n    switchContainer(page)\n    {\n        this.setState({\n            selectedUserInfo: \"\",\n            selectedSystemMsg: \"\",\n            selectedMyMsg: \"\",\n            selectedMyFavorite: \"\"\n        });\n        if (page === \"个人资料\")\n        {\n            this.setState({\n                selectedUserInfo: \"panel-selected-button\",\n                srcContainer: this.userInfo()\n            })\n        }\n        else if (page === \"系统通知\")\n        {\n            this.setState({\n                selectedSystemMsg: \"panel-selected-button\"\n            })\n        }\n        else if (page === \"我的消息\")\n        {\n            this.setState({\n                selectedMyMsg: \"panel-selected-button\"\n            })\n        }\n        else if (page === \"我的收藏\")\n        {\n            this.setState({\n                selectedMyFavorite: \"panel-selected-button\"\n            })\n        }\n\n    }\n    render()\n    {\n        var selectedState = [this.state.selectedUserInfo, this.state.selectedSystemMsg, this.state.selectedMyMsg, this.state.selectedMyFavorite]\n        var icons = [<AccountBox />, <Feedback />, <Message />, <Class />]\n        var buttons = [\"个人资料\", \"系统通知\", \"我的消息\", \"我的收藏\", \"我的草稿\", \"浏览历史\"]\n        return (\n            <>\n                <Drawer variant=\"permanent\">\n                    <div className=\"toolbar-padding\"></div>\n                    <List>\n                        {buttons.map((buttonText, index)=>{\n                                return (\n                                    <>\n                                        <ListItem button className={\"panel-list-item \" + selectedState[index]} key={buttonText} onClick={func=>this.switchContainer(buttonText)}>\n                                            <ListItemIcon style={{minWidth: 0}}>{icons[index]}</ListItemIcon>\n                                            <ListItemText style={{paddingLeft: \"15px\"}} primary={buttonText} />\n                                        </ListItem>\n                                    </>\n                                )\n                        })}\n                    </List>\n                </Drawer>\n                {this.state.srcContainer}\n            </>\n            \n        )\n    }\n\n    componentDidMount()\n    {\n        this.switchContainer(\"个人资料\");\n    }\n\n}\n\nexport default MainApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport Navbar from './components/Navbar';\nimport MainApp from \"./components/MainApp\"\n\nReactDOM.render(<Navbar />, document.getElementById('app-bar'));\nReactDOM.render(<MainApp />, document.getElementById('left-panel'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}